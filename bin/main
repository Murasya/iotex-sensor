#!/usr/bin/env ruby
# coding: utf-8
#
# 表題: センサーからデータを取得してファイルに保存するためのスクリプト
# 履歴: 2017-01-11 杉山耕一朗
#       2017-03-01 杉山耕一朗
#       2017-11-17 杉山耕一朗
#       2017-11-18 杉山耕一朗

# $ sudo gem install net-ping

require 'open3'
require 'fileutils'
require "matrix"

# パス
bin_list = {
  "sht75"   => "/usr/local/bin/sht  -trd 24 23",
  "sht75-2" => "/usr/local/bin/sht  -trd 27 22",
  "sht75-3" => "/usr/local/bin/sht  -trd 18 17",
  "bmp180"=> "/usr/local/bin/bmp180 -p -t",
  "tmp007"=> "/usr/local/bin/tmp007 --obj --die",
  "tsl2561"=> "/usr/local/bin/tsl2561 -l"
}

# テキストファイル
file_list = {
  "sht75"  => ["temp.txt", "humi.txt", "dp.txt"],
  "sht75-2"=> ["temp-2.txt", "humi-2.txt", "dp-2.txt"],
  "sht75-3"=> ["temp-3.txt", "humi-3.txt", "dp-3.txt"], 
  "bmp180" => ["pres.txt", "bmptemp.txt"], 
  "tmp007" => ["objtemp.txt", "dietemp.txt"], 
  "tsl2561"=> ["lux.txt"]
}

# データベースのカラム名
db_list = {
  "sht75"  => ["temp",  "humi",  "dp"],
  "sht75-2"=> ["temp2", "humi2", "dp2"],
  "sht75-3"=> ["temp3", "humi3", "dp3"], 
  "bmp180" => ["pres", "bmptemp"], 
  "tmp007" => ["objtemp", "dietemp"], 
  "tsl2561"=> ["lux"]
}

# データ保管
data_10sec = {
  "sht75"  => Array.new, 
  "sht75-2"=> Array.new, 
  "sht75-3"=> Array.new, 
  "bmp180" => Array.new, 
  "tmp007" => Array.new, 
  "tsl2561"=> Array.new, 
}

# 時刻合わせ
# NTP で時間が調整が終わるまで待つ. 
o = "no"
while (o =~ /no$/) do
  o, e, s = Open3.capture3("timedatectl status| grep NTP")
  sleep 10
end

# パワーマネージメント機能を OFF にする. 
system("sudo iwconfig wlan0 power off")

# hostname
o, e, s = Open3.capture3("hostname")
host = o.chomp

# サーバ名
server = "sky.epi.it.matsue-ct.jp"

# ディレクトリの用意. 定常
dir_now = "data_now/#{host}"
FileUtils.mkdir_p( dir_now ) unless FileTest.exist?( dir_now )
dir_err = "data_err/#{host}"
FileUtils.mkdir_p( dir_err ) unless FileTest.exist?( dir_err )
file_err1 = "#{dir_err}/retry.txt"
file_err2 = "#{dir_err}/retry.tmp.txt"
file_err3 = "#{dir_err}/retry.all.txt" 

# 保管用配列
var_list = Array.new

# SHT75 が存在するか確認
["sht75", "sht75-2", "sht75-3"].each{|sens|
  o, e, s = Open3.capture3(bin_list[sens])
  num = o.split("\n")
  unless num[0].to_f =~ /^[0-9]/
    var_list.push( sens )
  end
}

# bmp180 が存在するか確認
o, e, s = Open3.capture3("/usr/sbin/i2cdetect -y 1 | grep \" 77 \"")
unless o ==""
  var_list.push( "bmp180" )
end

# tmp007 が存在するか確認
o, e, s = Open3.capture3("/usr/sbin/i2cdetect -y 1 | grep \" 40 \"")
unless o ==""
  var_list.push( "tmp007" )
end

# tsl2561 が存在するか確認
o, e, s = Open3.capture3("/usr/sbin/i2cdetect -y 1 | grep \" 39 \"")
unless o ==""
  var_list.push( "tsl2561" )
end

# データ取り. 無限ループ
date0 = Time.now
while true do

  # 時間調整
  sleep 1 

  # 現在時刻取得
  date = Time.now

  # 10 秒毎にデータ取得
  if date.sec % 10 == 0
#    p date
    
    var_list.each{|var|
      
      # コマンドの実行
      o, e, s = Open3.capture3("#{bin_list[var]}")
      
      # 結果の保管
      if e==""
        # 改行区切りで値を分割して配列化
        output_list = o.split("\n")      

        # 配列に保管
        data_10sec[var].push ( output_list )
      end
#      p var
#      p data_10sec[var]
    }
  end

  # 1 分間隔で平均 => データ保管 & 転送
  if date.sec == 0  
    
    # csv ファイルの保管先の用意. 1 日毎に変更. 
    dir_csv = "data_csv/#{host}/#{date.strftime("%Y")}/#{date.strftime("%Y-%m")}"
    FileUtils.mkdir_p( dir_csv ) unless FileTest.exist?( dir_csv )      
    
    # url の準備
    url = "http://sky.epi.it.matsue-ct.jp/~sugiyama/test/monitoring.php?hostname=#{host}\&time=#{date.strftime("%Y/%m/%dT%H:%M:%S")}\&experiment_id=mon"

    var_list.each{|var|    
#      p var
      # 出力リスト
      output_list = Array.new

      for i in 0 .. (file_list[var].size - 1) do
        
        # 平均値の作成
        subarray = Matrix[*data_10sec[var]].t.row(i)
        num = subarray.size
        mean = 0.0
        subarray.each{|x|
          mean += x.to_f / num
        }        
        output_list.push( mean )
#        p subarray
#        p mean
        
        # テキストファイルへの書き出し
        f = open("#{dir_now}/#{file_list[var][i]}", "w")
        f.puts( mean )
        f.close
        
        # 保存
        url = "#{url}\&#{db_list[var][i]}=#{mean}"
      end

      # csv ファイルに保存. 追加
      # 1 日毎にファイル名を変更. 
      f = open("#{dir_csv}/#{var}_#{date.strftime("%Y-%m-%d")}.csv", "a")
      f.puts( "#{date.strftime("%Y/%m/%d %H:%M:%S")},#{output_list.join(',')},")
      f.close

      # 初期化
      data_10sec[var] = Array.new      
    }

    # サーバへ情報を送る.
#    p url
    o, e, s = Open3.capture3("curl -m 10 -X GET \"#{url}\"") # タイムアウト 10 秒
#    p o, e, s

    # curl コマンドがタイムアウトするか否かでネットワークの接続性を判断
    if (/exit 0$/ =~ s.to_s) 

      # IP の出力
      o, e, s = Open3.capture3("hostname -I")
      ip = o.chomp.split(" ")
      # p ip[0]
      file = open( "#{dir_now}/ip.txt", "w")
      file.puts( ip[0] )
      file.close
      
      # 送信漏れがあれば (該当ファイルがあれば) 再度送信.
      # 一度に全部送ると時間がかかるので, 30 行分に限定. 
      if FileTest.exist?( file_err1 ) 
        i = 0
        rfile = open(file_err2, "w")
        efile = open(file_err1, "r") 
        while line = efile.gets
          if (i < 30)
            o, e, s = Open3.capture3( line )
          else
            rfile.puts( line )  # 31 行目以降は一時ファイルに保管.
          end
          i=i+1
        end
        efile.close
        rfile.close
        FileUtils.mv(file_err2, file_err1) # 31 行目以降をファイルに残す
      end

    else
      rfile = open(file_err1, "a")
      afile = open(file_err3, "a") #テスト用
      rfile.puts("curl -X GET \"#{url}\"")  # 実行コマンドを保管
      afile.puts("curl -X GET \"#{url}\"")  # テスト用
      rfile.close
      afile.close

      # DHCP 再起動
      system("sudo /etc/init.d/dhcpcd stop")
      system("sudo /etc/init.d/dhcpcd start")
    end
  end
end

exit

