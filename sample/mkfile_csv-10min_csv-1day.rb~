#!/usr/bin/env ruby
# coding: utf-8
#
# 表題: データ解析スクリプト. 10 分平均から 1 日平均を作る.
#

require 'csv'
require 'narray'
require 'date'
require 'fileutils'

###
### 前処理
###

# csv ファイルに含まれる変数の一覧
vars = [
  "time", "temp", "temp2", "temp3", "humi", "humi2", "humi3",
  "dp", "dp2", "dp3", "pres", "bmptemp", "dietemp", "objtemp", "lux",
  "didx", "didx2", "didx3"
]

# ファイルの保存先
srcdir = "/iotex/data_csv_10min/"
pubdir = "/iotex/data_csv_1day/"

# 欠損値
miss = 999.9

###
### 全てのホストについて, 1 時間おきのデータを取得
###

50.times do |i|
  num0 = i + 1

  next if num0 == 46 ||  num0 == 47
  
  myid = "iot-#{sprintf('%02d', num0)}"
  p myid

  # データ置き場の作成. スクリプト実行のたびに全て作り直す.
  FileUtils.rm_rf( "#{pubdir}/#{myid}" )  if FileTest.exist?("#{pubdir}/#{myid}")
  FileUtils.mkdir( "#{pubdir}/#{myid}" ) 

  ###
  ### データの取得
  ###
  
  # 配列の初期化
  time_list = Array.new
  vars_list = Array.new
  num = vars.size - 1 # 時刻分を除く
  num.times do |i|
    vars_list[i] = Array.new
  end
  
  # csv ファイルの読み込み. 配列化
  Dir.glob("#{srcdir}/#{myid}/*csv").sort.each do |csvfile|
    CSV.foreach( csvfile ) do |item|

      time = DateTime.parse( "#{item[0]} JST" )

      # 毎正時の値のみ抽出
      if time.min == 0
        time_list.push( time )
        num.times do |i|
          vars_list[i].push( item[i+1].to_f ) 
        end
      end
    end
  end
  
  # NArrayMiss オブジェクトへ変換
  vars_list_narray = Array.new
  num.times do |i|      
    vars_list_narray[i] = NArray.to_na( vars_list[i] )
  end
  
  # 初期化
  count = 24 # 24 時間

  # 平均を取る開始時刻の添字
  idx0 = 1
  time_list.size.times do |i|    
    idx0 += 1
    if time_list[idx0].hour == 0 && time_list[idx0].min == 0 && time_list[idx0].sec == 0
      break
    end
  end
  
  # 終了時刻の添字
  idx1 = idx0 + count

  # 時刻をずらしながら 1 日の統計量を作成する. 
  while (time_list[idx0] + 1 < time_list[-1]) do 

    # 配列初期化
    time0  = time_list[idx0]
    mean   = Array.new( num, miss )  # 欠損値
    min    = Array.new( num, miss )  # 欠損値
    max    = Array.new( num, miss )  # 欠損値
    stddev = Array.new( num, miss )  # 欠損値
    median = Array.new( num, miss )  # 欠損値
    
    puts "#{time0} : #{time_list[idx0+1]}..#{time_list[idx1]}"
    
    # 1 つでも欠損値が含まれていたら日平均は欠損値扱いに. 
    idx2 = ( vars_list_narray[0][idx0+1..idx1] ).to_a.index( miss )    
    unless ( idx2 )
      num.times do |i|
        mean[i]  = vars_list_narray[i][idx0+1..idx1].mean(0)
        min[i]   = vars_list_narray[i][idx0+1..idx1].min(0)
        max[i]   = vars_list_narray[i][idx0+1..idx1].max(0)
        stddev[i]= vars_list_narray[i][idx0+1..idx1].stddev(0)
        median[i]= vars_list_narray[i][idx0+1..idx1].median(0)
      end
    end      

    csv = open("#{pubdir}/#{myid}/#{myid}_mean.csv", "a")
    csv.puts "#{time0.strftime("%Y/%m/%d")},#{mean.join(',')},\n"
    csv.close
    csv = open("#{pubdir}/#{myid}/#{myid}_min.csv", "a")
    csv.puts "#{time0.strftime("%Y/%m/%d")},#{min.join(',')},\n"
    csv.close
    csv = open("#{pubdir}/#{myid}/#{myid}_max.csv", "a")
    csv.puts "#{time0.strftime("%Y/%m/%d")},#{max.join(',')},\n"
    csv.close
    csv = open("#{pubdir}/#{myid}/#{myid}_stddev.csv", "a")
    csv.puts "#{time0.strftime("%Y/%m/%d")},#{stddev.join(',')},\n"
    csv.close
    csv = open("#{pubdir}/#{myid}/#{myid}_median.csv", "a")
    csv.puts "#{time0.strftime("%Y/%m/%d")},#{median.join(',')},\n"
    csv.close

    idx0 = idx1 
    idx1 = idx0 + count    
  end
end

